{{ define "Battle" }}
  {{ template "Header" .Title }}
    {{ template "Menu" .Me }}
    {{ template "Advertisement" .Ads }}
    <div class="container">
      <div class="battle-information">
        <span class="battle-host"><a class="battle-url" href="/user/{{.Battle.Host.ID}}">{{.Battle.Host.Name}}{{ if .Battle.Host.Patron }}&nbsp;<span class="material-icons tooltipped tooltip-patron" data-tooltip="Patron">local_fire_department</span>{{ end }}</a>&nbsp;- {{.Battle.Type}} Battle |&nbsp;{{if eq "entry" .Battle.Status}}<span style="color: #ff5800">Open</span>{{else if eq "voting" .Battle.Status}}<span style="color: #1E19FF; font-weight: bold;">Voting</span>{{else}}Finished{{end}}</span>
        <nav class="battle-title">
          <div class="nav-left">
          <h1>{{.Battle.Title}}</h1>
          <span class="battle-deadline">{{if eq "entry" .Battle.Status}}{{trimPrefix "Open - " .Battle.StatusDisplay}}{{else if eq "voting" .Battle.Status}}{{trimPrefix "Voting - " .Battle.StatusDisplay}}{{else}}{{.Battle.StatusDisplay}}{{end}}</span>
          </div>
          <ul class="nav-links">
            {{if .IsOwner}}
              <li class="nav-item nav-secondary"><a class="modal-trigger" href="#deleteBattle">Delete</a></li>
              {{if eq "complete" .Battle.Status}}
                <li class="nav-item nav-disabled"><a>CLOSED</a></li>
              {{else}}              
                <li class="nav-item nav-cta"><a id="edit-button" href="/battle/{{.Battle.ID}}/update/">EDIT</a></li>
              {{end}}
            {{else}}
              {{if .Battle.Attachment}}
              <li class="nav-item nav-secondary"><a href="{{.Battle.Attachment}}">FILES</a></li>
              {{end}}
              {{if eq "entry" .Battle.Status}}
                {{ if .EnteredBattle }}
                <li class="nav-item nav-secondary"><a href="/battle/{{.Battle.ID}}/feedback">FEEDBACK</a></li>
                <li class="nav-item nav-cta"><a href="/beat/{{.Battle.ID}}/update">UPDATE</a></li>
                {{ else }}
                {{ if .CanEnter }}
                <li class="nav-item nav-cta"><a href="/beat/{{.Battle.ID}}/submit">SUBMIT</a></li>
                {{ else }}
                <li class="nav-item nav-disabled"><a>NOT IN GROUP</a></li>
                {{ end }}
                {{ end }}
              {{ else }}
              {{if .EnteredBattle}}<li class="nav-item nav-secondary"><a href="/battle/{{.Battle.ID}}/feedback">FEEDBACK</a></li>{{ end }}
              <li class="nav-item nav-disabled"><a>CLOSED</a></li>
              {{end}}
            {{end}}
          </ul>
        </nav>
        <h3>Rules</h3>
        <div class="battle-rules">{{.Battle.RulesHTML}}</div>
        {{if .Battle.Tags }}
        <div class="chips battle-chips">{{range .Battle.Tags}}<a href="/battles/{{.Value}}" class="chip">{{.Value}}</a>{{end}}</div>
        {{end}}
      </div>
      <zing-grid no-data="No one has entered this battle yet." {{if eq "voting" .Battle.Status}}class="zing-vote"{{end}} caption='{{.Battle.Entries}} Entries {{if eq "complete" .Battle.Status}}{{else}}| <span class="votes-remaining">{{.VotesRemaining}}</span> Vote{{if eq .VotesRemaining 1}}{{else}}s{{end}} Remaining{{end}}' layout-controls="disabled" sort {{if eq "complete" .Battle.Status}}search{{end}} pager page-size="25" page-size-options="10, 25, 50" layout="row" viewport-stop>
        <zg-colgroup>
          {{if eq "complete" .Battle.Status}}
          <zg-column cell-class="zing-left" header="Artist" index="artist">
            <a class="battle-url" href="/user/[[record.artist.ID]]">[[record.artist.NameHTML]]</a>
          </zg-column>
          {{ if .IsMobile }}
          <zg-column cell-class="zing-left" header="Track" index="url">
          </zg-column>
          {{ else }}
          <zg-column cell-class="zing-left" header="Track" index="url">
            <div class="embedded-track">
              <button data-embed='[[index.url]]' class="playButton">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 43 43">
                  <defs>
                    <linearGradient id="playButton__gradient12" x1="0%" y1="0%" x2="0%" y2="100%" spreadMethod="pad">
                      <stop offset="0%" stop-color="#ff5500" stop-opacity="1"></stop>
                      <stop offset="100%" stop-color="#ff2200" stop-opacity="1"></stop>
                    </linearGradient>
                  </defs>
                  <circle fill="url(#playButton__gradient12)" stroke="#cc4400" cx="21.5" cy="21.5" r="21"></circle>
                  <circle class="playButton__overlay" fill="#000" fill-opacity="0.08" stroke="#cc4400" cx="21.5" cy="21.5" r="21"></circle>
                  <path class="playButton__play" fill="#fff" d="M31,21.5L17,33l2.5-11.5L17,10L31,21.5z"></path>
                </svg>
              </button>
            </div>
          </zg-column>
          {{ end }}
          {{ else }}
          <zg-column width="85px" cell-class="zing-left" type="row-number" header="Entry #"></zg-column>
          {{if eq "voting" .Battle.Status}}
          <zg-column width="85px" cell-class="zing-left" sorter="voteSort" header="Vote" index="vote_colour">
            <form class="form-ajax" action="/vote" method="post">
              <input name="id" type="hidden" value="[[record.id]]" />
              <button type="submit" class="btn-link">
                <span class="material-icons" row-class="dark" style="color: [[index.vote_colour]]">
                done
                </span>
              </button>
            </form>
          </zg-column>   
          {{ end }}
          {{ if .IsMobile }}
          <zg-column cell-class="zing-left" header="Track" index="url">
          </zg-column>
          {{ else }}
          <zg-column cell-class="zing-left" header="Track" index="url">
            <div class="embedded-track">
              <button data-embed='[[index.url]]' class="playButton">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 43 43">
                  <defs>
                    <linearGradient id="playButton__gradient12" x1="0%" y1="0%" x2="0%" y2="100%" spreadMethod="pad">
                      <stop offset="0%" stop-color="#ff5500" stop-opacity="1"></stop>
                      <stop offset="100%" stop-color="#ff2200" stop-opacity="1"></stop>
                    </linearGradient>
                  </defs>
                  <circle fill="url(#playButton__gradient12)" stroke="#cc4400" cx="21.5" cy="21.5" r="21"></circle>
                  <circle class="playButton__overlay" fill="#000" fill-opacity="0.08" stroke="#cc4400" cx="21.5" cy="21.5" r="21"></circle>
                  <path class="playButton__play" fill="#fff" d="M31,21.5L17,33l2.5-11.5L17,10L31,21.5z"></path>
                </svg>
              </button>
            </div>
          </zg-column>
          {{ end }}  
          {{ end }}          
          {{if eq "complete" .Battle.Status}}
          <zg-column cell-class="" header="Votes" index="votes"></zg-column>
          {{ end }}         
          {{if eq "voting" .Battle.Status}}
          <zg-column cell-class="zing-feedback" header="Feedback" index="feedback">
          <form class="form-ajax" action="/feedback/[[record.id]]" method="post"><input type="text" name="feedback" maxlength="256" placeholder="Your Feedback (Optional)" value="[[record.feedback]]" class="submit-nobox submit-feedback" /></form>
          </zg-column>
          {{ end }}
          {{if eq "entry" .Battle.Status}}
          <zg-column cell-class="zing-feedback" header="Feedback" index="feedback">
          <form class="form-ajax" action="/feedback/[[record.id]]" method="post"><input type="text" name="feedback" maxlength="256" placeholder="Your Feedback (Optional)" value="[[record.feedback]]" class="submit-nobox" /></form>
          </zg-column>
          {{ end }}
          <zg-column cell-class="zing-right" sorter="loveSort" header="Bookmark" index="like_colour">
            <form class="form-ajax" action="/like" method="post">
              <input name="id" type="hidden" value="[[record.id]]" />
              <button type="submit" class="btn-link">
                <span class="material-icons" row-class="dark" style="color: [[index.like_colour]]">
                favorite_border
                </span>
              </button>
            </form>
          </zg-column>
        </zg-colgroup>
        <zg-param name="loadByScroll" value="true"></zg-param>
      </zing-grid>
    </div>
    {{if .IsOwner}}
    <div id="deleteBattle" class="modal">
      <div class="modal-content">
        <h4 id="modal-header">Delete Battle</h4>
        <p id="modal-description">Are you sure you want to delete this battle?</p>
      </div>
      <div class="modal-footer">
        <form action="/battle/{{.Battle.ID}}/delete" method="post">
          <input type="hidden" name="delete" id="delete" value="yes">
          <ul class="nav-links">
            <li class="nav-item nav-cta"><input type="submit" id="modal-accept" value="ACCEPT"></li>
          </ul>
        </form>
      </div>
    </div>
    {{end}}
<script src="/static/battle.min.js"></script>
<script>
  {{if eq "complete" .Battle.Status}}
    function expandWaveform(){}
  {{else}}
    function expandWaveform(){$("iframe").css("width","20px");var t=-1;$("iframe").hover(function(){t=$(this)},function(){t=-1}),$(window).blur(function(){-1!=t&&($("iframe").css("width","20px"),t.css("width","100%")),setTimeout(function(){t.blur()},1)})}
  {{end}}
  window.addEventListener("load", () => {
    $('.modal').modal();
    var data = '{{ .Beats }}'; 
    const darkmodeActivated = window.localStorage.getItem('darkmode') === 'true';
    if(darkmodeActivated) {
        data = data.replace(/inverse=false/g, "inverse=true");
    }
    
    const zgRef = document.querySelector('zing-grid');
    zgRef.setData(data);

    zgRef.executeOnLoad(function() {
        setTimeout(function(){onChange()},1);
        const observer = lozad();
        observer.observe();
    });

    zgRef.addEventListener("grid:pagechange", zgRef => {
        setTimeout(function(){onChange()},1);
    });
    zgRef.addEventListener("grid:refresh", zgRef => {
        setTimeout(function(){onChange()},1);
    });
    zgRef.addEventListener("grid:pagesizechange", zgRef => {
        setTimeout(function(){onChange()},1);
    });
    zgRef.addEventListener("grid:ready", zgRef => {
        setTimeout(function(){onChange()},1);
    })
  });
</script>
{{ template "Footer" .Toast }}
{{ end }}